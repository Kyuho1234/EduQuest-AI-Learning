// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  sessions       Session[]
  documents      Document[]
  quizzes        Quiz[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Document {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizzes   Quiz[]
}

model Quiz {
  id         String     @id @default(cuid())
  title      String
  userId     String
  documentId String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  document   Document?  @relation(fields: [documentId], references: [id], onDelete: SetNull)
  questions  Question[]
  attempts   Attempt[]
}

model Question {
  id            String   @id @default(cuid())
  quizId        String
  question      String   @db.Text
  options       String[] // JSON array of options for multiple choice
  correctAnswer String
  explanation   String?  @db.Text
  questionType  String   @default("multiple_choice") // multiple_choice, short_answer, etc.
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  quiz          Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       Answer[]
}

model Attempt {
  id        String   @id @default(cuid())
  quizId    String
  userId    String
  score     Float
  feedback  String?  @db.Text
  createdAt DateTime @default(now())
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers   Answer[]
}

model Answer {
  id           String   @id @default(cuid())
  attemptId    String
  questionId   String
  userAnswer   String
  isCorrect    Boolean
  score        Float
  feedback     String?  @db.Text
  createdAt    DateTime @default(now())
  attempt      Attempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question     Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}